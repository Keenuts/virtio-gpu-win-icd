#pragma once

extern "C" {

#define __CPLUSPLUS

#include <stddef.h>
#include <string.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <windef.h>
#include <WinBase.h>
#include <winnt.h>
#include <WinUser.h>

	
	typedef UINT D3DKMT_HANDLE;
	typedef long NTSTATUS;

#define STATUS_SUCCESS 0L
#define STATUS_GRAPHIC_DRIVER_MISMATCH 0x401E0117L

	typedef struct _D3DKMT_CREATEDEVICEFLAGS
	{
		UINT    LegacyMode : 1;   // 0x00000001
		UINT    RequestVSync : 1;   // 0x00000002
#if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WIN8)
		UINT    DisableGpuTimeout : 1;   // 0x00000004
		UINT    Reserved : 29;   // 0xFFFFFFF8
#else
		UINT    Reserved : 30;   // 0xFFFFFFFC
#endif
	} D3DKMT_CREATEDEVICEFLAGS;

	typedef struct _D3DKMT_CREATEDEVICE {
		union {
			D3DKMT_HANDLE hAdapter;
			VOID		 *pAdapter;
		};

		D3DKMT_CREATEDEVICEFLAGS flags;
		D3DKMT_HANDLE hDevice;
		VOID *commandBuffer;
		UINT commandBufferSize;
		VOID *allocationList;
		UINT allocationListSize;
		VOID *patchLocationList;
		UINT pathLocationListSize;

	} D3DKMT_CREATEDEVICE;

    typedef enum _D3DKMT_ESCAPETYPE
    {
        D3DKMT_ESCAPE_DRIVERPRIVATE                 =  0,
        D3DKMT_ESCAPE_VIDMM                         =  1,
        D3DKMT_ESCAPE_TDRDBGCTRL                    =  2,
        D3DKMT_ESCAPE_VIDSCH                        =  3,
        D3DKMT_ESCAPE_DEVICE                        =  4,
        D3DKMT_ESCAPE_DMM                           =  5,
        D3DKMT_ESCAPE_DEBUG_SNAPSHOT                =  6,
        D3DKMT_ESCAPE_SETDRIVERUPDATESTATUS         =  7,
        D3DKMT_ESCAPE_DRT_TEST                      =  8,
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WIN8)
        D3DKMT_ESCAPE_DIAGNOSTICS                   =  9,
        D3DKMT_ESCAPE_OUTPUTDUPL_SNAPSHOT           = 10,
        D3DKMT_ESCAPE_OUTPUTDUPL_DIAGNOSTICS        = 11,
        D3DKMT_ESCAPE_BDD_PNP                       = 12,
        D3DKMT_ESCAPE_BDD_FALLBACK                  = 13,
        D3DKMT_ESCAPE_ACTIVATE_SPECIFIC_DIAG        = 14,
        D3DKMT_ESCAPE_MODES_PRUNED_OUT              = 15,
        D3DKMT_ESCAPE_WHQL_INFO                     = 16,
        D3DKMT_ESCAPE_BRIGHTNESS                    = 17,
        D3DKMT_ESCAPE_EDID_CACHE                    = 18,
        D3DKMT_ESCAPE_GENERIC_ADAPTER_DIAG_INFO     = 19,
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM1_3)
        D3DKMT_ESCAPE_MIRACAST_DISPLAY_REQUEST      = 20,
        D3DKMT_ESCAPE_HISTORY_BUFFER_STATUS         = 21,
        // unused (22 can be reused for future needs as it was never exposed for external purposes)
        D3DKMT_ESCAPE_MIRACAST_ADAPTER_DIAG_INFO    = 23,
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM2_0)
        D3DKMT_ESCAPE_FORCE_BDDFALLBACK_HEADLESS    = 24,
        D3DKMT_ESCAPE_REQUEST_MACHINE_CRASH         = 25,
        D3DKMT_ESCAPE_HMD_GET_EDID_BASE_BLOCK       = 26,
        D3DKMT_ESCAPE_SOFTGPU_ENABLE_DISABLE_HMD    = 27,
        D3DKMT_ESCAPE_PROCESS_VERIFIER_OPTION       = 28,
        D3DKMT_ESCAPE_ADAPTER_VERIFIER_OPTION       = 29,
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM2_1)
        D3DKMT_ESCAPE_IDD_REQUEST                   = 30,
        D3DKMT_ESCAPE_DOD_SET_DIRTYRECT_MODE        = 31,
        D3DKMT_ESCAPE_LOG_CODEPOINT_PACKET          = 32,
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM2_2)
        D3DKMT_ESCAPE_LOG_USERMODE_DAIG_PACKET      = 33,
        D3DKMT_ESCAPE_GET_EXTERNAL_DIAGNOSTICS      = 34,
        D3DKMT_ESCAPE_GET_PREFERRED_MODE            = 35,
    #endif // DXGKDDI_INTERFACE_VERSION_WDDM2_2
    #endif // DXGKDDI_INTERFACE_VERSION_WDDM2_1
    #endif // DXGKDDI_INTERFACE_VERSION_WDDM2_0
    #endif // DXGKDDI_INTERFACE_VERSION_WDDM1_3

        D3DKMT_ESCAPE_WIN32K_START                  = 1024,
        D3DKMT_ESCAPE_WIN32K_HIP_DEVICE_INFO        = 1024,
        D3DKMT_ESCAPE_WIN32K_QUERY_CD_ROTATION_BLOCK = 1025,
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM1_3)
        D3DKMT_ESCAPE_WIN32K_DPI_INFO               = 1026, // Use hContext for the desired hdev
        D3DKMT_ESCAPE_WIN32K_PRESENTER_VIEW_INFO    = 1027,
        D3DKMT_ESCAPE_WIN32K_SYSTEM_DPI             = 1028,
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM2_0)
        D3DKMT_ESCAPE_WIN32K_BDD_FALLBACK           = 1029,
        D3DKMT_ESCAPE_WIN32K_DDA_TEST_CTL           = 1030,
        D3DKMT_ESCAPE_WIN32K_USER_DETECTED_BLACK_SCREEN = 1031,
        D3DKMT_ESCAPE_WIN32K_HMD_ENUM               = 1032,
        D3DKMT_ESCAPE_WIN32K_HMD_CONTROL            = 1033,
        D3DKMT_ESCAPE_WIN32K_LPMDISPLAY_CONTROL     = 1034,
    #endif // DXGKDDI_INTERFACE_VERSION_WDDM2_0
    #endif // DXGKDDI_INTERFACE_VERSION_WDDM1_3
    #endif // DXGKDDI_INTERFACE_VERSION_WIN8
    } D3DKMT_ESCAPETYPE;

    typedef struct _D3DDDI_ESCAPEFLAGS {
        union
        {
            UINT flag;
            UINT Value;
        };
    } D3DDDI_ESCAPEFLAGS;

	typedef struct _D3DKMT_ESCAPE {
		D3DKMT_HANDLE hAdapter;
		D3DKMT_HANDLE hDevice;
		D3DKMT_ESCAPETYPE type;
		D3DDDI_ESCAPEFLAGS flags;

		VOID *privateDriverData;
		UINT privateDriverDataSize;
		D3DKMT_HANDLE hContext;
	} D3DKMT_ESCAPE;

	typedef struct _D3DKMT_ADAPTERINFO {
		D3DKMT_HANDLE handle;
		LUID luid;
		ULONG sourceCount;
		BOOL moveRegionPrefered;
	} D3DKMT_ADAPTERINFO;

	typedef struct _D3DKMT_ENUMADAPTERS {
		ULONG count;
#define MAX_ENUM_ADAPTERS 16
		D3DKMT_ADAPTERINFO adapters[MAX_ENUM_ADAPTERS];
	} D3DKMT_ENUMADAPTERS;

    typedef enum _D3DKMT_TDRDBGCTRLTYPE { 
      D3DKMT_TDRDBGCTRLTYPE_FORCETDR          = 0,
      D3DKMT_TDRDBGCTRLTYPE_DISABLEBREAK      = 1,
      D3DKMT_TDRDBGCTRLTYPE_ENABLEBREAK       = 2,
      D3DKMT_TDRDBGCTRLTYPE_UNCONDITIONAL     = 3,
      D3DKMT_TDRDBGCTRLTYPE_VSYNCTDR          = 4,
      D3DKMT_TDRDBGCTRLTYPE_GPUTDR            = 5,
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WIN8)
      D3DKMT_TDRDBGCTRLTYPE_FORCEDODTDR       = 6,
      D3DKMT_TDRDBGCTRLTYPE_FORCEDODVSYNCTDR  = 7,
      D3DKMT_TDRDBGCTRLTYPE_ENGINETDR         = 8

    #endif
    } D3DKMT_TDRDBGCTRLTYPE;

    typedef enum _D3DKMT_CLIENTHINT
    {
        D3DKMT_CLIENTHINT_UNKNOWN     = 0,
        D3DKMT_CLIENTHINT_OPENGL      = 1,
        D3DKMT_CLIENTHINT_CDD         = 2,       // Internal
        D3DKMT_CLIENTHINT_DX7         = 7,
        D3DKMT_CLIENTHINT_DX8         = 8,
        D3DKMT_CLIENTHINT_DX9         = 9,
        D3DKMT_CLIENTHINT_DX10        = 10,
    } D3DKMT_CLIENTHINT;

    typedef struct _D3DKMT_CREATECONTEXT {
        D3DKMT_HANDLE hDevice;
        UINT nodeOrdinal;
        UINT EngineAfinity;
        UINT flags;
        VOID *privateData;
        UINT privateDataSize;
        D3DKMT_CLIENTHINT clientHint;
        D3DKMT_HANDLE hContext;
        VOID *commandBuffer;
        UINT commandBufferSize;
        VOID* allocationList;
        UINT allocationListSize;
        VOID *patchLocationList;
        UINT patchLocationListSize;
        ULONGLONG commandBufferAddr;
    } D3DKMT_CREATECONTEXT;


    typedef enum _KMTQUERYADAPTERINFOTYPE
    {
         KMTQAITYPE_UMDRIVERPRIVATE         =  0,
         KMTQAITYPE_UMDRIVERNAME            =  1,
         KMTQAITYPE_UMOPENGLINFO            =  2,
         KMTQAITYPE_GETSEGMENTSIZE          =  3,
         KMTQAITYPE_ADAPTERGUID             =  4,
         KMTQAITYPE_FLIPQUEUEINFO           =  5,
         KMTQAITYPE_ADAPTERADDRESS          =  6,
         KMTQAITYPE_SETWORKINGSETINFO       =  7,
         KMTQAITYPE_ADAPTERREGISTRYINFO     =  8,
         KMTQAITYPE_CURRENTDISPLAYMODE      =  9,
         KMTQAITYPE_MODELIST                = 10,
         KMTQAITYPE_CHECKDRIVERUPDATESTATUS = 11,
         KMTQAITYPE_VIRTUALADDRESSINFO      = 12, // _ADVSCH_
         KMTQAITYPE_DRIVERVERSION           = 13,
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WIN8)
         KMTQAITYPE_ADAPTERTYPE             = 15,
         KMTQAITYPE_OUTPUTDUPLCONTEXTSCOUNT = 16,
         KMTQAITYPE_WDDM_1_2_CAPS           = 17,
         KMTQAITYPE_UMD_DRIVER_VERSION      = 18,
         KMTQAITYPE_DIRECTFLIP_SUPPORT      = 19,
    #endif
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM1_3)
         KMTQAITYPE_MULTIPLANEOVERLAY_SUPPORT = 20,
         KMTQAITYPE_DLIST_DRIVER_NAME       = 21,
         KMTQAITYPE_WDDM_1_3_CAPS           = 22,
    #endif // DXGKDDI_INTERFACE_VERSION_WDDM1_3
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM1_3_PATH_INDEPENDENT_ROTATION)
         KMTQAITYPE_MULTIPLANEOVERLAY_HUD_SUPPORT = 23,
    #endif // DXGKDDI_INTERFACE_VERSION_WDDM1_3_PATH_INDEPENDENT_ROTATION
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM2_0)
         KMTQAITYPE_WDDM_2_0_CAPS           = 24,
         KMTQAITYPE_NODEMETADATA            = 25,
         KMTQAITYPE_CPDRIVERNAME            = 26,
         KMTQAITYPE_XBOX                    = 27,
         KMTQAITYPE_INDEPENDENTFLIP_SUPPORT = 28,
         KMTQAITYPE_MIRACASTCOMPANIONDRIVERNAME = 29,
         KMTQAITYPE_PHYSICALADAPTERCOUNT    = 30,
         KMTQAITYPE_PHYSICALADAPTERDEVICEIDS = 31,
         KMTQAITYPE_DRIVERCAPS_EXT          = 32,
         KMTQAITYPE_QUERY_MIRACAST_DRIVER_TYPE = 33,
         KMTQAITYPE_QUERY_GPUMMU_CAPS       = 34,
         KMTQAITYPE_QUERY_MULTIPLANEOVERLAY_DECODE_SUPPORT = 35,
         KMTQAITYPE_QUERY_HW_PROTECTION_TEARDOWN_COUNT = 36,
         KMTQAITYPE_QUERY_ISBADDRIVERFORHWPROTECTIONDISABLED = 37,
         KMTQAITYPE_MULTIPLANEOVERLAY_SECONDARY_SUPPORT = 38,
         KMTQAITYPE_INDEPENDENTFLIP_SECONDARY_SUPPORT = 39,
    #endif // DXGKDDI_INTERFACE_VERSION_WDDM2_0
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM2_1)
         KMTQAITYPE_PANELFITTER_SUPPORT     = 40,
    #endif // DXGKDDI_INTERFACE_VERSION_WDDM2_1
    #if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM2_2)
         KMTQAITYPE_PHYSICALADAPTERPNPKEY   = 41,
         KMTQAITYPE_GETSEGMENTGROUPSIZE     = 42,
         KMTQAITYPE_MPO3DDI_SUPPORT         = 43,
         KMTQAITYPE_HWDRM_SUPPORT           = 44,
         KMTQAITYPE_MPOKERNELCAPS_SUPPORT   = 45,
         KMTQAITYPE_MULTIPLANEOVERLAY_STRETCH_SUPPORT = 46,
         KMTQAITYPE_GET_DEVICE_VIDPN_OWNERSHIP_INFO = 47,
    #endif // DXGKDDI_INTERFACE_VERSION_WDDM2_2
    } KMTQUERYADAPTERINFOTYPE;

    typedef struct _D3DKMT_QUERYADAPTERINFO {
        D3DKMT_HANDLE           hAdapter;
        KMTQUERYADAPTERINFOTYPE Type;
        VOID                    *pPrivateDriverData;
        UINT                    PrivateDriverDataSize;
    } D3DKMT_QUERYADAPTERINFO;

	typedef NTSTATUS(*PFND3DKMT_CREATEDEVICE)(_Inout_ D3DKMT_CREATEDEVICE*);
	typedef NTSTATUS(*PFND3DKMT_ESCAPE)(_In_ const D3DKMT_ESCAPE*);
	typedef NTSTATUS(*PFND3DKMT_ENUMADAPTERS)(_Inout_ const D3DKMT_ENUMADAPTERS*);
	typedef NTSTATUS(*PFND3DKMT_CREATECONTEXT)(_Inout_ D3DKMT_CREATECONTEXT*);
	typedef NTSTATUS(*PFND3DKMT_QUERYADAPTERINFO)(_Inout_ const D3DKMT_QUERYADAPTERINFO*);
}


#include "GLtypes.h"
#include "opengl32.h"