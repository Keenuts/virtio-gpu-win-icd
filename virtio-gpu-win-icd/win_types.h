#pragma once

#include <windef.h>

extern "C" {

#define __CPLUSPLUS

#include <windef.h>
#include <WinBase.h>

typedef struct tagPIXELFORMATDESCRIPTOR {
	WORD  nSize;
	WORD  nVersion;
	DWORD dwFlags;
	BYTE  iPixelType;
	BYTE  cColorBits;
	BYTE  cRedBits;
	BYTE  cRedShift;
	BYTE  cGreenBits;
	BYTE  cGreenShift;
	BYTE  cBlueBits;
	BYTE  cBlueShift;
	BYTE  cAlphaBits;
	BYTE  cAlphaShift;
	BYTE  cAccumBits;
	BYTE  cAccumRedBits;
	BYTE  cAccumGreenBits;
	BYTE  cAccumBlueBits;
	BYTE  cAccumAlphaBits;
	BYTE  cDepthBits;
	BYTE  cStencilBits;
	BYTE  cAuxBuffers;
	BYTE  iLayerType;
	BYTE  bReserved;
	DWORD dwLayerMask;
	DWORD dwVisibleMask;
	DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR;

    typedef UINT D3DKMT_HANDLE;
    typedef long NTSTATUS;

#define STATUS_SUCCESS 0L
#define STATUS_GRAPHIC_DRIVER_MISMATCH 0x401E0117L

    typedef enum _D3DKMT_ESCAPETYPE
    {
        D3DKMT_ESCAPE_DRIVERPRIVATE = 0,
        D3DKMT_ESCAPE_VIDMM = 1,
        D3DKMT_ESCAPE_TDRDBGCTRL = 2,
        D3DKMT_ESCAPE_VIDSCH = 3,
        D3DKMT_ESCAPE_DEVICE = 4,
        D3DKMT_ESCAPE_DMM = 5,
        D3DKMT_ESCAPE_DEBUG_SNAPSHOT = 6,
        D3DKMT_ESCAPE_SETDRIVERUPDATESTATUS = 7,
        D3DKMT_ESCAPE_DRT_TEST = 8,
#if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WIN8)
        D3DKMT_ESCAPE_DIAGNOSTICS = 9,
        D3DKMT_ESCAPE_OUTPUTDUPL_SNAPSHOT = 10,
        D3DKMT_ESCAPE_OUTPUTDUPL_DIAGNOSTICS = 11,
        D3DKMT_ESCAPE_BDD_PNP = 12,
        D3DKMT_ESCAPE_BDD_FALLBACK = 13,
        D3DKMT_ESCAPE_ACTIVATE_SPECIFIC_DIAG = 14,
        D3DKMT_ESCAPE_MODES_PRUNED_OUT = 15,
        D3DKMT_ESCAPE_WHQL_INFO = 16,
        D3DKMT_ESCAPE_BRIGHTNESS = 17,
        D3DKMT_ESCAPE_EDID_CACHE = 18,
        D3DKMT_ESCAPE_GENERIC_ADAPTER_DIAG_INFO = 19,
#if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM1_3)
        D3DKMT_ESCAPE_MIRACAST_DISPLAY_REQUEST = 20,
        D3DKMT_ESCAPE_HISTORY_BUFFER_STATUS = 21,
        // unused (22 can be reused for future needs as it was never exposed for external purposes)
        D3DKMT_ESCAPE_MIRACAST_ADAPTER_DIAG_INFO = 23,
#if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM2_0)
        D3DKMT_ESCAPE_FORCE_BDDFALLBACK_HEADLESS = 24,
        D3DKMT_ESCAPE_REQUEST_MACHINE_CRASH = 25,
        D3DKMT_ESCAPE_HMD_GET_EDID_BASE_BLOCK = 26,
        D3DKMT_ESCAPE_SOFTGPU_ENABLE_DISABLE_HMD = 27,
        D3DKMT_ESCAPE_PROCESS_VERIFIER_OPTION = 28,
        D3DKMT_ESCAPE_ADAPTER_VERIFIER_OPTION = 29,
#if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM2_1)
        D3DKMT_ESCAPE_IDD_REQUEST = 30,
        D3DKMT_ESCAPE_DOD_SET_DIRTYRECT_MODE = 31,
        D3DKMT_ESCAPE_LOG_CODEPOINT_PACKET = 32,
#if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM2_2)
        D3DKMT_ESCAPE_LOG_USERMODE_DAIG_PACKET = 33,
        D3DKMT_ESCAPE_GET_EXTERNAL_DIAGNOSTICS = 34,
        D3DKMT_ESCAPE_GET_PREFERRED_MODE = 35,
#endif // DXGKDDI_INTERFACE_VERSION_WDDM2_2
#endif // DXGKDDI_INTERFACE_VERSION_WDDM2_1
#endif // DXGKDDI_INTERFACE_VERSION_WDDM2_0
#endif // DXGKDDI_INTERFACE_VERSION_WDDM1_3

        D3DKMT_ESCAPE_WIN32K_START = 1024,
        D3DKMT_ESCAPE_WIN32K_HIP_DEVICE_INFO = 1024,
        D3DKMT_ESCAPE_WIN32K_QUERY_CD_ROTATION_BLOCK = 1025,
#if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM1_3)
        D3DKMT_ESCAPE_WIN32K_DPI_INFO = 1026, // Use hContext for the desired hdev
        D3DKMT_ESCAPE_WIN32K_PRESENTER_VIEW_INFO = 1027,
        D3DKMT_ESCAPE_WIN32K_SYSTEM_DPI = 1028,
#if (DXGKDDI_INTERFACE_VERSION >= DXGKDDI_INTERFACE_VERSION_WDDM2_0)
        D3DKMT_ESCAPE_WIN32K_BDD_FALLBACK = 1029,
        D3DKMT_ESCAPE_WIN32K_DDA_TEST_CTL = 1030,
        D3DKMT_ESCAPE_WIN32K_USER_DETECTED_BLACK_SCREEN = 1031,
        D3DKMT_ESCAPE_WIN32K_HMD_ENUM = 1032,
        D3DKMT_ESCAPE_WIN32K_HMD_CONTROL = 1033,
        D3DKMT_ESCAPE_WIN32K_LPMDISPLAY_CONTROL = 1034,
#endif // DXGKDDI_INTERFACE_VERSION_WDDM2_0
#endif // DXGKDDI_INTERFACE_VERSION_WDDM1_3
#endif // DXGKDDI_INTERFACE_VERSION_WIN8
    } D3DKMT_ESCAPETYPE;

    typedef struct _D3DDDI_ESCAPEFLAGS {
        UINT HardwareAccess : 1;
        UINT reserved : 31;
    } D3DDDI_ESCAPEFLAGS;

    typedef struct _D3DKMT_ESCAPE {
        D3DKMT_HANDLE hAdapter;
        D3DKMT_HANDLE hDevice;
        D3DKMT_ESCAPETYPE type;
        D3DDDI_ESCAPEFLAGS flags;

        VOID *privateDriverData;
        UINT privateDriverDataSize;
        D3DKMT_HANDLE hContext;
    } D3DKMT_ESCAPE;

    typedef struct _D3DKMT_ADAPTERINFO {
        D3DKMT_HANDLE handle;
        LUID luid;
        ULONG sourceCount;
        BOOL moveRegionPrefered;
    } D3DKMT_ADAPTERINFO;

    typedef struct _D3DKMT_ENUMADAPTERS {
        ULONG count;
#define MAX_ENUM_ADAPTERS 16
        D3DKMT_ADAPTERINFO adapters[MAX_ENUM_ADAPTERS];
    } D3DKMT_ENUMADAPTERS;

    typedef NTSTATUS(*PFND3DKMT_ENUMADAPTERS)(_Inout_ const D3DKMT_ENUMADAPTERS*);
    typedef NTSTATUS(*PFND3DKMT_ESCAPE)(_In_ const D3DKMT_ESCAPE*);
}